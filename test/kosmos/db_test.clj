(ns kosmos.db-test
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.tools.logging :as log]
            [com.stuartsierra.component :as component]
            [kosmos :refer [initialize start! stop! system]]
            [kosmos.db :refer :all]
            [midje.sweet :refer :all]))


(def config {:hsqldb-server
             {:kosmos/type :kosmos.db-test/HsqlDbServerComponent
              :port        "9002"
              :database    "file:dev-resources/db/test"
              :dbname      "test"}

             :pool {:auto-commit true
                    :maximum-pool-size 2
                    :pool-name "test-pool"}

             :db
             {:kosmos/type     :kosmos.db/DbComponent
              :kosmos/requires [:hsqldb-server :pool]
              :classname       "org.hsqldb.jdbc.JDBCDriver"
              :subprotocol     "hsqldb"
              :subname         "hsql://localhost:9002/test"
              :host            "localhost"
              :port            9002
              :database        "test"
              :user            "SA"
              :password        ""}})

(defrecord HsqlDbServerComponent [port database dbname]
  component/Lifecycle
  (start [component]
    (log/debug component)
    (let [properties (org.hsqldb.persist.HsqlProperties.
                      (doto (java.util.Properties.)
                        (.put "server.port"       (:port     component))
                        (.put "server.database.0" (:database component))
                        (.put "server.dbname.0"   (:dbname   component))))
          _             (org.hsqldb.server.ServerConfiguration/translateDefaultDatabaseProperty properties)
          server (doto (org.hsqldb.Server.)
                   (.setRestartOnShutdown false)
                   (.setNoSystemExit true)
                   (.setProperties properties))]
      (log/debug "Starting hsqldb server component ...")
      (.start server)
      (log/debug (str "hsqldb server started successfully listening on port " (.getPort server)))
      (assoc component :server server)))

  (stop [component]
    (log/info "Stopping hsqldb server component")
    (when-let [server (:server component)]
      (doto server
        (.signalCloseAllServerConnections)
        (.stop))
      (org.hsqldb.DatabaseManager/closeDatabases org.hsqldb.Database/CLOSEMODE_NORMAL)
      (log/info "hsqldb server stopped successfully"))))


(start! (initialize config))

(fact "database component working"

  (let [db (:db system)]
    (jdbc/execute! db ["drop table test if exists"]) => irrelevant
    (jdbc/execute! db [(str "create table test ("
                            " id bigint generated by default as identity (start with 1001),"
                            " name varchar(255) not null,"
                            " description varchar(255),"
                            " primary key (id)"
                            " )") ]) => irrelevant

    ;; setup some records (more added in tests)
    (jdbc/insert! db :test {:name "test-01" :description "a test record one"}) => irrelevant
    (jdbc/insert! db :test {:name "test-02" :description "a test record two"}) => irrelevant
    (jdbc/insert! db :test {:name "test-03" :description "a test record three"}) => irrelevant
    (jdbc/insert! db :test {:name "test-04" :description "a test record four"}) => irrelevant))

(stop!)
