(ns kosmos.db-test
  (:require [clojure.java.jdbc :as jdbc]
            [clojure.test :refer :all]
            [kosmos :refer [map->system start! stop! system]]
            [kosmos.db :refer :all]))

(def config {:hsqldb-server
             {:kosmos/init :kosmos.server/HsqlDbServerComponent
              :port        "9005"
              :database    "file:target/db/test"
              :dbname      "test"}

             :pool {:auto-commit true
                    :maximum-pool-size 2
                    :pool-name "test-pool"}

             :ds
             {:kosmos/init     :kosmos.db/DbComponent
              :kosmos/requires [:hsqldb-server :pool]
              :classname       "org.hsqldb.jdbc.JDBCDriver"
              :subprotocol     "hsqldb"
              :protocol        "hsql"
              :host            "localhost"
              :port            9005
              :database        "test"
              :user            "SA"
              :password        ""}

             :db
             {:kosmos/init     :kosmos.db/DbComponent
              :kosmos/requires [:hsqldb-server]
              :classname       "org.hsqldb.jdbc.JDBCDriver"
              :subprotocol     "hsqldb"
              :protocol        "hsql"
              :subname         "hsql://localhost:9005/test"
              :host            "localhost"
              :port            9005
              :database        "test"
              :user            "SA"
              :password        ""}})

(defn setup-db-server [f]
  (start! (map->system config))
  (f)
  (stop!))

(use-fixtures :once setup-db-server)

(defn inserted? [returned]
  ((comp :id first) returned))

(deftest component-with-pooling
  (let [ds (:ds system)]
    (is (= [0] (jdbc/execute! ds ["drop table test if exists"])))
    (is (= [0] (jdbc/execute! ds [(str "create table test ("
                                       " id bigint generated by default as identity (start with 1001),"
                                       " name varchar(255) not null,"
                                       " description varchar(255),"
                                       " primary key (id)"
                                       " )")])))
    (is (inserted? (jdbc/insert! ds :test {:name "test-01" :description "a test record one"})))
    (is (inserted? (jdbc/insert! ds :test {:name "test-02" :description "a test record two"})))
    (is (inserted?  (jdbc/insert! ds :test {:name "test-03" :description "a test record three"})))
    (is (inserted? (jdbc/insert! ds :test {:name "test-04" :description "a test record four"})))))

(deftest component-without-pooling
  (let [db (:db system)]
    (is (= [0] (jdbc/execute! db ["drop table test if exists"])))
    (is (= [0] (jdbc/execute! db [(str "create table test ("
                                       " id bigint generated by default as identity (start with 1001),"
                                       " name varchar(255) not null,"
                                       " description varchar(255),"
                                       " primary key (id)"
                                       " )")])))
    (is (inserted? (jdbc/insert! db :test {:name "test-01" :description "a test record one"})))
    (is (inserted? (jdbc/insert! db :test {:name "test-02" :description "a test record two"})))
    (is (inserted? (jdbc/insert! db :test {:name "test-03" :description "a test record three"})))
    (is (inserted? (jdbc/insert! db :test {:name "test-04" :description "a test record four"})))))
